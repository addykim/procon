var Item = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="">
        <h2 className="">
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var ProsAndCons = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleItemSubmit: function(item) {
    var items = this.state.data;
    // Optimistically set an id on the new item. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    item.id = Date.now();
    var newComments = items.concat([item]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: item,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: items});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="">
        <Form onCommentSubmit={this.handleItemSubmit} />
        <List data={this.state.data} />
      </div>
    );
  }
});

var List = React.createClass({
  render: function() {
  	var pros = []
  	var cons = []
		this.props.data.forEach(function(item) {
  	  if (item.category === 'pro') {
        pros.push(
        	<Item author={item.author} key={item.id}>
        		{item.author}:
        		{item.text}
        	</Item>
        	);
      } else if (item.category === 'con') {
      	cons.push(
        	<Item author={item.author} key={item.id}>
        		{item.author}:
 						{item.text}
        	</Item>
        	);
      }
    });
    return (
      <div className="">
      <h3>Pro</h3>
        {pros}
      <h3>Con</h3>
      	{cons}
      </div>
    );
  }
});

var Form = React.createClass({
  getInitialState: function() {
    return {category: '', author: '', text: '', weight: 0};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onItemSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <ProsAndCons url="/api/items" pollInterval={2000} />,
  document.getElementById('content')
);